{"version":3,"sources":["components/product/Product.module.scss","components/cart/Cart.module.scss","app/hooks.ts","components/cart/cartSlice.tsx","components/product/index.tsx","components/cart/index.tsx","containers/ProductList/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","cartSlice","createSlice","name","initialState","products","total","reducers","addToCart","state","action","addedElementId","payload","id","elementAlreadyInCart","find","el","quantity","push","removeFromCart","removedElementId","filter","countsCartTotal","sum","product","price","toFixed","selectCart","cart","actions","Product","useState","setState","dispatch","useEffect","fetch","then","response","json","catch","error","console","log","className","styles","map","Card","Header","Img","variant","src","image","Body","Title","line","truncateText","text","title","description","Button","onClick","Cart","length","type","ProductList","App","store","configureStore","reducer","cartReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e0716bb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"product\":\"Product_product__ZqOoR\",\"card-header\":\"Product_card-header__2vDuc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart\":\"Cart_cart__1JwZl\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport CartStateType from '../../app/interfaces/CartStateType'\n\nconst initialState: CartStateType = {\n  products: [],\n  total: 0,\n}\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    addToCart: (state, action) => {\n      // added element's ID\n      const addedElementId = action.payload.id\n      // element in cart\n      const elementAlreadyInCart = state.products.find(\n        (el) => el.id === addedElementId,\n      )\n      // if element alreay in cart\n      if (elementAlreadyInCart) {\n        // +1 to quantity\n        if (elementAlreadyInCart.quantity) {\n          elementAlreadyInCart.quantity++\n        }\n      } else {\n        // sets element's quantity to 1\n        action.payload.quantity = 1\n        // adds product to list\n        state.products.push(action.payload)\n      }\n    },\n    removeFromCart: (state, action) => {\n      // Removed element's ID\n      const removedElementId = action.payload.id\n      // element in cart\n      const elementAlreadyInCart = state.products.find(\n        (el) => el.id === action.payload.id,\n      )\n      // if element alreay in cart\n      if (elementAlreadyInCart) {\n        // -1 to quantity\n        if (\n          elementAlreadyInCart.quantity &&\n          elementAlreadyInCart.quantity > 1\n        ) {\n          elementAlreadyInCart.quantity--\n        } else if (\n          elementAlreadyInCart.quantity &&\n          elementAlreadyInCart.quantity === 1\n        ) {\n          state.products = state.products.filter(\n            (el) => el.id !== removedElementId,\n          )\n        }\n      }\n    },\n    countsCartTotal: (state) => {\n      let sum = 0\n      for (const product of state.products) {\n        if (product.quantity) {\n          const test = product.price * product.quantity\n          sum += test\n        }\n      }\n      state.total = +sum.toFixed(3)\n    },\n  },\n})\n\nexport const selectCart = (state: RootState) => state.cart\n\nexport const { addToCart, removeFromCart, countsCartTotal } = cartSlice.actions\n\nexport default cartSlice.reducer\n","import React, { useEffect, useState } from 'react'\n\nimport { useAppDispatch } from '../../app/hooks'\nimport { addToCart } from '../cart/cartSlice'\nimport styles from './Product.module.scss'\n\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\n\nimport TextTruncate from 'react-text-truncate'\nimport ProductType from '../../app/interfaces/ProductType'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface Props {}\n\nconst Product: React.FC<Props> = () => {\n  const [state, setState] = useState([])\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    fetch('https://fakestoreapi.com/products')\n      .then((response) => response.json())\n      .then((response) => setState(response))\n      .catch((error) => {\n        console.log(error)\n      });\n  })\n\n  return (\n    <div className={styles.product}>\n      <div className=\"row text-center\">\n        {state.map((product: ProductType) => {\n          return (\n            <div className=\"col-sm-4 mb-4\" key={product.id}>\n              <Card>\n                <Card.Header className={styles['card-header']}>\n                  <Card.Img variant=\"top\" src={product.image} />\n                </Card.Header>\n                <Card.Body>\n                  <Card.Title>\n                    <TextTruncate\n                      line={1}\n                      truncateText=\"…\"\n                      text={product.title}\n                    />\n                  </Card.Title>\n                  <div className=\"cart-text my-3\">\n                    <TextTruncate\n                      line={2}\n                      truncateText=\"…\"\n                      text={product.description}\n                    />\n                  </div>\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                      dispatch(addToCart(product))\n                    }}\n                  >\n                    Add to cart\n                  </Button>\n                </Card.Body>\n              </Card>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Product\n","import React, { useEffect } from 'react'\nimport { useAppSelector, useAppDispatch } from '../../app/hooks'\nimport {\n  selectCart,\n  addToCart,\n  removeFromCart,\n  countsCartTotal,\n} from './cartSlice'\nimport ProductType from '../../app/interfaces/ProductType'\nimport CartStateType from '../../app/interfaces/CartStateType'\nimport styles from './Cart.module.scss'\n\nfunction Cart() {\n  // Create new state state\n  const cart: CartStateType = useAppSelector(selectCart)\n\n  const dispatch = useAppDispatch()\n\n  // Similaire à componentDidMount et componentDidUpdate :\n  useEffect(() => {\n    dispatch(countsCartTotal())\n  }, [cart])\n\n  return (\n    <div className={`${styles.cart} my-3`}>\n      <h5>Cart :</h5>\n      <ul className=\"list-group\">\n        {cart.products.length === 0 && (\n          <li className=\"list-group-item font-italic\">Cart is empty...</li>\n        )}\n        {cart.products.map((product: ProductType) => {\n          if (product.quantity && product.quantity > 0) {\n            return (\n              <li className=\"list-group-item\" key={product.id}>\n                <span className=\"d-block text-truncate\">\n                  <span className=\"font-weight-bold\">{product.title}</span>\n                </span>\n                <span className=\"mr-2 float-right\">{product.price}€</span>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary badge badge-primary badge-pill\"\n                  onClick={() => {\n                    dispatch(removeFromCart(product))\n                  }}\n                >\n                  -\n                </button>\n                <span className=\"bg-light mx-2\">{product.quantity}</span>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary badge badge-primary badge-pill\"\n                  onClick={() => {\n                    dispatch(addToCart(product))\n                  }}\n                >\n                  +\n                </button>\n              </li>\n            )\n          }\n        })}\n        {cart.products.length > 0 && (\n          <li className=\"list-group-item\">\n            Total : <span className=\"float-right\">{cart.total}</span>\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default Cart\n","/**\n * ProductList Page\n *\n */\n\nimport React from 'react'\nimport Product from '../../components/product'\nimport Cart from '../../components/cart'\n\nexport default function ProductList() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-9\">\n          <h5 className=\"mt-3\">Products :</h5>\n            <Product />\n        </div>\n        <div className=\"col-sm-3\">\n          <Cart />\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport ProductList from './containers/ProductList'\n\n// CSS\nimport './App.scss'\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ProductList />\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport cartReducer from '../components/cart/cartSlice'\n \nexport const store = configureStore({\n  reducer: {\n    cart: cartReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}